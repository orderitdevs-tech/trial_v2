# .zipline/pipeline.yml

name: "DAG Pipeline with Artifacts"
description: "A pipeline that uses dependencies and produces a build artifact."

steps:
  - name: "A - Setup Environment"
    image: "alpine:latest"
    run: |
      echo "Setting up build environment..."
      sleep 5
      echo "Environment ready."

  - name: "B - Lint Codebase"
    image: "alpine:latest"
    run: |
      echo "Running linters..."
      sleep 8
      echo "Linting passed."

  - name: "C - Run Security Scan"
    image: "alpine:latest"
    run: |
      echo "Scanning for vulnerabilities..."
      sleep 12
      echo "No critical vulnerabilities found."

  - name: "D - Build Application"
    needs:
      - "A - Setup Environment"
      - "B - Lint Codebase"
      - "C - Run Security Scan"
    image: "alpine:latest"
    run: |
      echo "All checks passed. Starting application build..."
      # Create a fake build output directory for demonstration
      mkdir -p ./dist
      echo "<html>Hello, World!</html>" > ./dist/index.html
      echo "{ \"version\": \"1.0.0\" }" > ./dist/version.json
      echo "Application built successfully."
    
    # --- THIS SECTION DEFINES THE ARTIFACT ---
    artifacts:
      - name: "website-build" # The name for the downloadable file
        path: "./dist"       # The path inside the container to save

  - name: "E - Deploy to Staging"
    needs:
      - "D - Build Application"
    image: "alpine:latest"
    run: |
      echo "Deploying build artifacts to staging..."
      # In a real scenario, this step would download and use the artifact.
      sleep 10
      echo "Deployment to staging complete."
