# .zipline/pipeline.yml

name: "Production Release Pipeline"
description: "A complex DAG pipeline that builds, tests, and deploys the application, producing a build artifact. Runs only on main and release branches."

# This section makes the pipeline branch-specific
on:
  push:
    branches:
      - main
      - 'release/*' # Supports wildcards
      - dev

steps:
  # --- Stage 1: Initial Checks (Run in Parallel) ---
  - name: "A - Lint Codebase"
    image: "alpine:latest"
    run: |
      echo "Running linters..."
      sleep 10
      echo "Linting passed."

  - name: "B - Run Security Scan"
    image: "alpine:latest"
    run: |
      echo "Scanning for security vulnerabilities..."
      sleep 15
      echo "No critical vulnerabilities found."

  # --- Stage 2: Build Application (Waits for checks, produces artifact) ---
  - name: "C - Build Application"
    needs:
      - "A - Lint Codebase"
      - "B - Run Security Scan"
    image: "alpine:latest"
    run: |
      echo "All checks passed. Starting application build..."
      # Create a fake build output directory
      mkdir -p ./build/assets
      echo "<html>Hello from the build!</html>" > ./build/index.html
      echo "main.js content" > ./build/assets/main.js
      echo "Application built successfully."
    artifacts:
      name: "production-build"
      paths:
        - "./build"

  # --- Stage 3: Test Build (Waits for build) ---
  - name: "D - Run Integration Tests"
    needs:
      - "C - Build Application"
    image: "alpine:latest"
    run: |
      echo "Running integration tests on the built application..."
      # In a real scenario, this step would download and use the artifact.
      sleep 20
      echo "Integration tests passed."

  # --- Stage 4: Deploy (Final step) ---
  - name: "E - Deploy to Production"
    needs:
      - "D - Run Integration Tests"
    image: "alpine:latest"
    secrets:
      - "PRODUCTION_DEPLOY_KEY"
    run: |
      echo "All tests passed. Deploying to production..."
      if [ -z "$PRODUCTION_DEPLOY_KEY" ]; then
        echo "Error: Production deployment key is not set."
        exit 1
      else
        echo "Authentication successful. Deployment starting..."
        sleep 10
        echo "ðŸš€ Successfully deployed to production!"
      fi
