# .zipline/pipeline.yml

name: "Complex Software Delivery Pipeline"
description: "A complex DAG with multiple parallel stages to test advanced orchestration."

steps:
  # --- Stage 1: Initial Setup (Run in Parallel) ---
  - name: "A - Setup Environment"
    image: "alpine:latest"
    run: |
      echo "Setting up build environment and installing dependencies..."
      sleep 10
      echo "Environment ready."

  - name: "B - Lint Codebase"
    image: "alpine:latest"
    run: |
      echo "Running linters on the entire codebase..."
      sleep 15
      echo "Linting passed."

  - name: "C - Run Security Scan"
    image: "alpine:latest"
    run: |
      echo "Scanning for security vulnerabilities..."
      sleep 20
      echo "No critical vulnerabilities found."
      
 

  # --- Stage 2: Build (Waits for all setup tasks) ---
  - name: "D - Build Application"
    needs:
      - "A - Setup Environment"
      - "B - Lint Codebase"
      - "C - Run Security Scan"
    image: "alpine:latest"
    run: |
      echo "All checks passed. Starting application build..."
      # Create a fake build directory to be used later
      mkdir -p ./build
      echo "Build output" > ./build/app.bin
      sleep 25
      echo "Application built successfully."

  # --- Stage 3: Parallel Testing (Waits for build) ---
  - name: "E - Run Backend Integration Tests"
    needs:
      - "D - Build Application"
    image: "alpine:latest"
    run: |
      echo "Running backend-specific integration tests..."
      sleep 30
      echo "Backend tests passed."

  - name: "F - Run Frontend Integration Tests"
    needs:
      - "D - Build Application"
    image: "alpine:latest"
    run: |
      echo "Running frontend-specific integration tests..."
      sleep 30
      echo "Frontend tests passed."

  # --- Stage 4: Package (Waits for all tests, produces artifact) ---
  - name: "G - Package Artifacts"
    needs:
      - "E - Run Backend Integration Tests"
      - "F - Run Frontend Integration Tests"
    image: "alpine:latest"
    run: |
      echo "All tests passed. Packaging application..."
      # This simulates creating a final package from the build output
      mv ./build ./package
      echo "v1.0.0" > ./package/version.txt
      sleep 20
      echo "Artifacts packaged."
    artifacts:
      name: "application-package"
      paths:
        - "./package"

  # --- Stage 5: Staging Deployment (Waits for packaging) ---
  - name: "H - Deploy to Staging"
    needs:
      - "G - Package Artifacts"
    image: "alpine:latest"
    run: |
      echo "Deploying to the staging environment..."
      sleep 15
      echo "Deployment to staging successful."

  # --- Stage 6: Staging Verification (Waits for staging deployment) ---
  - name: "I - Run Staging Smoke Tests"
    needs:
      - "H - Deploy to Staging"
    image: "alpine:latest"
    run: |
      echo "Running smoke tests against the staging environment..."
      sleep 10
      echo "Staging environment is healthy."

  # --- Stage 7: Production Deployment (Final step) ---
  - name: "J - Deploy to Production"
    needs:
      - "I - Run Staging Smoke Tests"
    image: "alpine:latest"
    run: |
      echo "Staging tests passed. Promoting build to production..."
      sleep 10
      echo "ðŸš€ Successfully deployed to production!"

  - name: "run index.js"
    needs:
      - "J - Deploy to Production"
    image: "alpine:latest"
    run: node index.js
